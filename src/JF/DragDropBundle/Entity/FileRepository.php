<?php

namespace JF\DragDropBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * FotoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FileRepository extends EntityRepository {

    /**
     * Prende le foto del profilo
     * 
     * @param int $idProfilo
     * @return type
     */
    public function getFotoProfilo($idProfilo) {
        $q = $this->createQueryBuilder('f');

        $q->where('f.profilo =:idProfilo');
        $q->andWhere($q->expr()->eq('f.foto_profilo', true));
        $q->setParameter('idProfilo', $idProfilo);
        $dql = $q->getQuery();
        $results = $dql->getOneOrNullResult();

        return $results;
    }
    


    /**
     * Prende tutte le foto che non sono private di tutti gli utenti
     * 
     * @return type
     */
    public function getFotoWallGenericoPubblico($limite) {
        $q = $this->createQueryBuilder('f');
        //$q->select('f.nome');
        $q->where('(f.foto_privata IS NULL OR f.foto_privata != 1)');
        $q->andWhere('(f.foto_eliminata IS NULL OR f.foto_eliminata != 1)');
        //$q->andWhere('f.profilo =:idProfilo');
        $q->setMaxResults($limite);
        //$q->setParameter('idProfilo', $idProfilo);
        $dql = $q->getQuery();
        $results = $dql->execute();

        return $results;
    }

    /**
     * Prende tutte le foto che non sono private dell'utente
     * 
     * @param int $idProfilo
     * @param bool $privata se metto false mi fa vedere anche le foto private, utile per la gesitone delle foto 
     * @return type
     */
    public function getFotoWallPubblico($idProfilo, $privata = true, $limite) {
        $q = $this->createQueryBuilder('f');
        $q->where('f.profilo =:idProfilo');
        if ($privata) {
            $q->andWhere('(f.foto_privata IS NULL OR f.foto_privata != 1)');
        }
        $q->setMaxResults($limite);
        $q->andWhere('(f.foto_eliminata IS NULL OR f.foto_eliminata != 1)');
        $q->setParameter('idProfilo', $idProfilo);
        $dql = $q->getQuery();
        $results = $dql->execute();

        return $results;
    }

}
